#include "webserver.h"

#include "lwip/tcp.h"
#include <string.h>

static struct tcp_pcb *http_server;

err_t http_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err){
	if (p == NULL) {
		tcp_close(tpcb);
		return ERR_OK;
	}
	if (strstr(p->payload, "GET") == 0){
		tcp_close(tpcb);
		tcp_recved(tpcb, p->tot_len);
		pbuf_free(p);
		return ERR_OK;
	}

	tcp_arg(tpcb, tpcb);
	tcp_err(tpcb, http_err);

	if (strstr(p->payload, "GET /abcd") != 0){
		http_download_t *http_download_pcb = NULL;
		if ((http_download_pcb = new_download_connection(framebuffer, sizeof(framebuffer), tpcb)) != NULL){
			while(ERR_OK != tcp_write(tpcb, http_download, strlen(http_download), TCP_WRITE_FLAG_MORE));
			tcp_output(tpcb);
		}
		else {
			char *str = "dupxo";
			while(ERR_OK != tcp_write(tpcb, str, strlen(str), TCP_WRITE_FLAG_COPY));
			tcp_output(tpcb);
		}
		tcp_recved(tpcb, p->tot_len);
		pbuf_free(p);
		return ERR_OK;
	}

	else if (strstr(p->payload, "GET /index.html") != 0){
		while(ERR_OK != tcp_write(tpcb, index_html, index_html_len, TCP_WRITE_FLAG_COPY));
		tcp_output(tpcb);
		tcp_recved(tpcb, p->tot_len);
		pbuf_free(p);
		return ERR_OK;
	}

	else if (strstr(p->payload, "GET /demo.html") != 0){
		while(ERR_OK != tcp_write(tpcb, demo_html, demo_html_len, TCP_WRITE_FLAG_COPY));
		tcp_output(tpcb);
		tcp_recved(tpcb, p->tot_len);
		pbuf_free(p);
		return ERR_OK;
	}

	char *str = "<a href=\"http://192.168.1.43/abcd\">abcd</a><h2>%u/%u</h2><br>pbuf mem: <progress value=\"%u\" max=\"%u\"></progress> %u/%u";
	char html_buf[256];
	sprintf(html_buf, str, lwip_stats.mem.used, lwip_stats.mem.avail, lwip_stats.mem.used, 524288, lwip_stats.mem.used, 524288);
	while(ERR_OK != tcp_write(tpcb, html_buf, strlen(html_buf), TCP_WRITE_FLAG_COPY));
	tcp_output(tpcb);
	tcp_recved(tpcb, p->tot_len);
	pbuf_free(p);
	return ERR_OK;
}

err_t http_accept(void *arg, struct tcp_pcb *newpcb, err_t err){
	tcp_recv(newpcb, http_recv);
	tcp_sent(newpcb, http_sent);
	tcp_accepted(http_server);
	return ERR_OK;
}

void start_webserver() {
	http_server = tcp_new();
	tcp_bind(http_server, IP_ADDR_ANY, 80);
	http_server = tcp_listen(http_server);
	tcp_accept(http_server, http_accept);
}
