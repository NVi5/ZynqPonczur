#include "model_loader.h"
#include <vector>

bool loadOBJ(std::vector<vec3_t> &out_vertices) {

    std::vector<unsigned int> vertexIndices, uvIndices, normalIndices;
    std::vector<vec3_t> temp_vertices;
	resetpos();
	float vector_length_max = 0.0f;
    while(1){
        char* line = getline((char*)&file_buffer[file_pos]);
        if (line == NULL)
            break;
        if ( strncmp( line, "v", 1 ) == 0 ){
            vec3_t vertex;
            sscanf(line, "v %f %f %f\n", &vertex.x, &vertex.y, &vertex.z );

            float vector_length = sqrtf( vertex.x*vertex.x + vertex.y*vertex.y + vertex.z*vertex.z);
            if (vector_length > vector_length_max) vector_length_max = vector_length;

            temp_vertices.push_back(vertex);
        }
        else if ( strncmp( line, "f", 1 ) == 0 ){
            std::string vertex1, vertex2, vertex3;
            unsigned int vertexIndex[3], uvIndex[3], normalIndex[3];
            int matches = sscanf(line, "f %d/%d/%d %d/%d/%d %d/%d/%d\n", &vertexIndex[0], &uvIndex[0], &normalIndex[0], &vertexIndex[1], &uvIndex[1], &normalIndex[1], &vertexIndex[2], &uvIndex[2], &normalIndex[2] );
            if (matches != 9){
                return false;
            }

            vertexIndices.push_back(vertexIndex[0]);
            vertexIndices.push_back(vertexIndex[1]);
            vertexIndices.push_back(vertexIndex[2]);
            uvIndices    .push_back(    uvIndex[0]);
            uvIndices    .push_back(    uvIndex[1]);
            uvIndices    .push_back(    uvIndex[2]);
            normalIndices.push_back(normalIndex[0]);
            normalIndices.push_back(normalIndex[1]);
            normalIndices.push_back(normalIndex[2]);
        }
        if (line) free(line);
    }
    out_vertices.clear();
    for( unsigned int i=0; i<vertexIndices.size(); i++ ){
        unsigned int vertexIndex = vertexIndices[i];
        vec3_t vertex = temp_vertices[ vertexIndex-1 ];
        vertex.x = 300.0f*vertex.x/vector_length_max;
        vertex.y = 300.0f*vertex.y/vector_length_max;
        vertex.z = 300.0f*vertex.z/vector_length_max;
        out_vertices.push_back(vertex);
    }
    return true;
}


